[
  {
    "id": "ch1_q1",
    "type": "short",
    "question": "دستور stats در Splunk چیست و چه تفاوتی با tstats دارد؟",
    "answer": "در Splunk، `stats` عملیات aggregation را روی رویدادهای خام انجام می‌دهد و می‌تواند بر هر فیلدی که در داده موجود است کار کند. این یعنی انعطاف بالا اما مصرف منابع بیشتر چون هر رویداد باید پردازش شود. در مقابل، `tstats` فقط روی داده‌های index شده و TSIDX کار می‌کند، که سرعت جستجو را چندین برابر می‌کند اما فقط برای فیلدهایی که در زمان indexing ذخیره شده‌اند کاربرد دارد. در کار واقعی SOC Tier 3، وقتی دنبال بررسی دقیق sequence رویدادهای یک حمله هستم که نیاز به تمام payload دارم از stats استفاده می‌کنم، اما وقتی نیاز دارم هزاران گیگ داده را برای یافتن الگوی کلی یا IOC خاص در کل دیتای سازمان بررسی کنم، tstats انتخاب اول است.",
    "hint": "- **حتماً به خاطر بسپار**: stats = انعطاف، tstats = سرعت.\n- stats روی raw event کار می‌کند.\n- tstats روی metadata ایندکس شده.\n- tstats برای hunting سریع عالی است.\n- stats برای جزئیات کامل حمله.",
    "extra": "### نکات تکمیلی:\n- **سناریو واقعی**: در بررسی DNS Amplification، از `tstats count where index=dns by src_ip, query` استفاده کردم تا الگوهای درخواست‌ها را سریع پیدا کنم، سپس با `stats` جستجوی عمیق‌تر انجام دادم تا payload مشکوک را بررسی کنم.\n- **دام رایج**: استفاده از stats روی حجم بالای داده بدون فیلتر اولیه → کندی شدید.\n- **بهبود عملکرد**: همیشه قبل از stats، time range را محدود کنید و از فیلترهای ایندکس شده استفاده کنید.\n- **ارتباط مفهومی**: فهمیدن tstats مقدمه استفاده بهینه از summaries_only و from است که در Splunk Enterprise Security بسیار مهم است.",
    "page": 1,
    "Rel": "Splunk,stats,tstats,indexing,TSIDX,performance",
    "meta": {
      "TSIDX": "فایل‌های ایندکس زمانی-سری در Splunk که داده‌ها را برای جستجوی سریع‌تر ذخیره می‌کنند."
    }
  },
  {
    "id": "ch1_q2",
    "type": "short",
    "question": "eventstats در Splunk چه تفاوتی با stats دارد و چه کاربردی در Tier 3 دارد؟",
    "answer": "eventstats مشابه stats عمل می‌کند اما نتیجه aggregation را به هر رویداد اضافه می‌کند به جای اینکه فقط یک جدول خروجی بسازد. این یعنی شما می‌توانید برای هر event، مقایسه آن با آمار کلی یا میانگین کل را انجام دهید. در Tier 3، از eventstats استفاده می‌کنم تا در همان رویداد ببینم مثلاً حجم ترافیک این کاربر نسبت به میانگین کاربران چقدر انحراف دارد، بدون اینکه جریان اصلی جستجو را بشکنم. این روش به hunting رفتارهای غیرعادی بسیار کمک می‌کند چون داده enriched شده در همان کوئری باقی می‌ماند و می‌توان روی آن شرط گذاشت.",
    "hint": "- **حتماً به خاطر بسپار**: eventstats = enrichment.\n- خروجی به eventها اضافه می‌شود.\n- عالی برای anomaly detection.\n- stats فقط خروجی aggregate دارد.",
    "extra": "### مثال عملی:\n- در بررسی Data Exfiltration با FTP، `eventstats avg(bytes) as avg_bytes by user` استفاده کردم و سپس فیلتر کردم که فقط eventهایی که `bytes > avg_bytes * 5` هستند نمایش داده شوند.\n- **دام**: اضافه کردن تعداد زیادی فیلد با eventstats روی دیتای حجیم → مصرف RAM بالا.\n- **ارتباط با Tier 3**: این قابلیت در correlation جستجوها برای شناسایی lateral movement یا brute force کمک زیادی می‌کند.",
    "page": 1,
    "Rel": "Splunk,eventstats,anomaly-detection,enrichment",
    "meta": {}
  },
  {
    "id": "ch1_q3",
    "type": "short",
    "question": "دستور transaction در Splunk چه کاری انجام می‌دهد و چه خطراتی در استفاده نادرست دارد؟",
    "answer": "دستور `transaction` رویدادهایی که با یک معیار مشترک (مانند IP یا session ID) و محدوده زمانی مشخص رخ داده‌اند را در یک گروه جمع می‌کند. این برای بازسازی یک session یا بررسی یک روند حمله بسیار مفید است. اما transaction بسیار پرهزینه است چون نیاز به نگهداری همه رویدادهای مرتبط در حافظه دارد. در SOC Tier 3، وقتی می‌خواهم کل فعالیت‌های یک کاربر از login تا logout را بازسازی کنم یا sequence کامل اجرای یک بدافزار را در یک host ببینم، transaction کمک زیادی می‌کند. ولی در اکثر موارد، از ترکیب stats و streamstats استفاده می‌کنم تا به همان نتیجه با هزینه کمتر برسم.",
    "hint": "- **حتماً به خاطر بسپار**: transaction = grouping.\n- by، startswith، endswith حیاتی هستند.\n- مصرف حافظه بالا.\n- جایگزین: stats + streamstats.",
    "extra": "### تجربه عملی:\n- در تحلیل یک حمله brute force موفق، transaction روی index=auth by src_ip startswith=\"failure\" endswith=\"success\" اجرا شد تا مسیر دقیق ورود مهاجم مشخص شود.\n- **دام رایج**: اجرای transaction روی دیتای بیش از چند میلیون event بدون فیلتر اولیه → زمان اجرا بسیار طولانی.\n- **نکته پیشرفته**: می‌توان transaction را با sequence ترکیب کرد تا kill-chain حمله دقیق‌تر شناسایی شود.",
    "page": 1,
    "Rel": "Splunk,transaction,session,grouping,streamstats",
    "meta": {}
  },
  {
    "id": "ch1_q4",
    "type": "short",
    "question": "Throttle در Splunk ES چگونه عمل می‌کند و چه کاربردی در کاهش نویز دارد؟",
    "answer": "Throttle در Splunk ES به شما اجازه می‌دهد که بعد از تولید یک alert برای یک مقدار خاص (مثلاً یک IP) تا مدت زمان مشخص دوباره alert مشابهی ایجاد نشود. این برای جلوگیری از تولید حجم زیاد alert از یک IOC که تکرار می‌شود بسیار مهم است. در کار عملی، وقتی یک آدرس IP مخرب در یک شبکه scanning انجام می‌دهد، به جای اینکه هر دقیقه صدها alert ایجاد شود، یک alert با throttle ایجاد می‌کنم که مثلاً برای 1 ساعت همان IP را suppress کند. این باعث کاهش alert fatigue می‌شود ولی همچنان اولین وقوع را ثبت می‌کنیم.",
    "hint": "- **حتماً به خاطر بسپار**: throttle = محدودیت زمانی تکرار.\n- بر اساس فیلد کلیدی.\n- کاهش alert fatigue.",
    "extra": "### تجربه Tier 3:\n- در یک incident DNS tunneling، IP مخرب بارها در span چند دقیقه تکرار می‌شد؛ با throttle key=src_ip و duration=30m تعداد alertها را از 500 به 10 کاهش دادیم.\n- **دام**: اگر مدت throttle طولانی باشد ممکن است یک حمله جدید با همان IOC را از دست بدهید.\n- **ارتباط مفهومی**: throttle متفاوت از suppression است — throttle محدودیت زمانی دارد، suppression کامل جلوی alert را می‌گیرد.",
    "page": 1,
    "Rel": "Splunk,ES,throttle,alert-fatigue",
    "meta": {}
  },
  {
    "id": "ch1_q5",
    "type": "short",
    "question": "Suppression در Splunk ES چیست و چه تفاوتی با Throttle دارد؟",
    "answer": "Suppression یک مکانیزم در Splunk ES است که جلوی تولید یک notable event را به طور کامل می‌گیرد، بر اساس یک شرط یا signature خاص. در حالی که throttle فقط وقوع‌های بعدی را برای مدتی متوقف می‌کند، suppression باعث می‌شود هیچ‌وقت alert ایجاد نشود تا زمانی که شرط آن تغییر کند یا غیرفعال شود. در Tier 3، وقتی می‌دانیم یک signature اشتباه است یا مربوط به رفتار مجاز در محیط ماست، آن را suppress می‌کنیم تا نویز کم شود و منابع روی alertهای واقعی متمرکز شوند.",
    "hint": "- **حتماً به خاطر بسپار**: suppression = حذف کامل alert.\n- throttle = محدودیت زمانی.\n- هر suppression باید review شود.",
    "extra": "### تجربه واقعی:\n- Suppression برای یک signature که توسط vulnerability scanner داخلی ایجاد می‌شد ولی در ابتدا false positive تصور می‌شد.\n- **دام**: suppression اشتباه می‌تواند blind spot امنیتی بسازد.\n- **روش حرفه‌ای**: suppression را موقت و با تاریخ انقضا ایجاد کنید و در مستندات IR ذکر کنید.",
    "page": 1,
    "Rel": "Splunk,ES,suppression,throttle",
    "meta": {}
  }
]
